// <auto-generated />
using System;
using CRUDPersonas.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRUDPersonas.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20230123225219_SistemaUsuarios")]
    partial class SistemaUsuarios
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CRUDPersonas.Entities.Cancha", b =>
                {
                    b.Property<int>("CanchaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cancha_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CanchaId"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descripcion");

                    b.Property<bool?>("EstadoCancha")
                        .HasColumnType("bit")
                        .HasColumnName("estado_cancha");

                    b.Property<int?>("HorarioId")
                        .HasColumnType("int")
                        .HasColumnName("horario_id");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("CanchaId");

                    b.HasIndex("HorarioId");

                    b.ToTable("cancha", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Categoria", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoria_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaId"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("CategoriaId")
                        .HasName("PK__categori__DB875A4FA9C4CE7B");

                    b.ToTable("categoria", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"), 1L, 1);

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("persona_id");

                    b.Property<int?>("ReservaId")
                        .HasColumnType("int")
                        .HasColumnName("reserva_id");

                    b.HasKey("ClienteId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("ReservaId");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Empleado", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("empleado_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpleadoId"), 1L, 1);

                    b.Property<string>("Clave")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("clave");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("persona_id");

                    b.Property<int?>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    b.HasKey("EmpleadoId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("RolId");

                    b.ToTable("empleado", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.EstadoHorario", b =>
                {
                    b.Property<int>("EstadoHorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("estado_horario_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoHorarioId"), 1L, 1);

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo");

                    b.HasKey("EstadoHorarioId");

                    b.ToTable("estado_horario", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.EstadoReserva", b =>
                {
                    b.Property<int>("EstadoReservaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("estado_reserva_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoReservaId"), 1L, 1);

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo");

                    b.HasKey("EstadoReservaId");

                    b.ToTable("estado_reserva", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Horario", b =>
                {
                    b.Property<int>("HorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("horario_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HorarioId"), 1L, 1);

                    b.Property<int?>("EstadoHorarioId")
                        .HasColumnType("int")
                        .HasColumnName("estado_horario_id");

                    b.Property<TimeSpan?>("HoraFin")
                        .HasColumnType("time")
                        .HasColumnName("hora_fin");

                    b.Property<TimeSpan?>("HoraInicio")
                        .HasColumnType("time")
                        .HasColumnName("hora_inicio");

                    b.Property<int?>("ReservaId")
                        .HasColumnType("int")
                        .HasColumnName("reserva_id");

                    b.HasKey("HorarioId");

                    b.HasIndex("EstadoHorarioId");

                    b.HasIndex("ReservaId");

                    b.ToTable("horario", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Persona", b =>
                {
                    b.Property<int>("PersonaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("persona_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonaId"), 1L, 1);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellidos");

                    b.Property<string>("CiPersona")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ci_persona");

                    b.Property<string>("Direccion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("direccion");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("Genero")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("genero");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombres");

                    b.HasKey("PersonaId");

                    b.ToTable("persona", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("producto_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoId"), 1L, 1);

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("categoria_id");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("precio");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("proveedor_id");

                    b.Property<int?>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("producto", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Proveedor", b =>
                {
                    b.Property<int>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("proveedor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProveedorId"), 1L, 1);

                    b.Property<string>("Direccion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("direccion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("PaginaWeb")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("pagina_web");

                    b.Property<string>("Teñlefono")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("teñlefono");

                    b.HasKey("ProveedorId");

                    b.ToTable("proveedor", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Reserva", b =>
                {
                    b.Property<int>("ReservaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reserva_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservaId"), 1L, 1);

                    b.Property<string>("Duracion")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("duracion");

                    b.Property<int?>("EstadoReservaId")
                        .HasColumnType("int")
                        .HasColumnName("estado_reserva_id");

                    b.Property<DateTime?>("FechaReserva")
                        .HasColumnType("date")
                        .HasColumnName("fecha_reserva");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("persona_id");

                    b.HasKey("ReservaId");

                    b.HasIndex("EstadoReservaId");

                    b.HasIndex("PersonaId");

                    b.ToTable("reserva", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.ReservaVenta", b =>
                {
                    b.Property<int?>("ReservaId")
                        .HasColumnType("int")
                        .HasColumnName("reserva_id");

                    b.Property<int?>("VentaId")
                        .HasColumnType("int")
                        .HasColumnName("venta_id");

                    b.HasIndex("ReservaId");

                    b.HasIndex("VentaId");

                    b.ToTable("reserva_venta", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolId"), 1L, 1);

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("fecha_registro")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Nombre")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombre");

                    b.HasKey("RolId");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Venta", b =>
                {
                    b.Property<int>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("venta_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VentaId"), 1L, 1);

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("descuento");

                    b.Property<DateTime?>("FechaDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("fecha_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("MontoFinal")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("monto_final");

                    b.HasKey("VentaId")
                        .HasName("PK__venta__B135080966F135F5");

                    b.ToTable("venta", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.VentaProducto", b =>
                {
                    b.Property<int?>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<decimal?>("MontoTotal")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("monto_total");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("precio");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int")
                        .HasColumnName("producto_id");

                    b.Property<int?>("VentaId")
                        .HasColumnType("int")
                        .HasColumnName("venta_id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("venta_producto", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Cancha", b =>
                {
                    b.HasOne("CRUDPersonas.Entities.Horario", "Horario")
                        .WithMany("Canchas")
                        .HasForeignKey("HorarioId")
                        .HasConstraintName("fk_cancha_horario");

                    b.Navigation("Horario");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Cliente", b =>
                {
                    b.HasOne("CRUDPersonas.Entities.Persona", "Persona")
                        .WithMany("Clientes")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("fk_cliente_persona");

                    b.HasOne("CRUDPersonas.Entities.Reserva", "Reserva")
                        .WithMany("Clientes")
                        .HasForeignKey("ReservaId")
                        .HasConstraintName("fk_cliente_reserva");

                    b.Navigation("Persona");

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Empleado", b =>
                {
                    b.HasOne("CRUDPersonas.Entities.Persona", "Persona")
                        .WithMany("Empleados")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("fk_empleado_persona");

                    b.HasOne("CRUDPersonas.Entities.Rol", "Rol")
                        .WithMany("Empleados")
                        .HasForeignKey("RolId")
                        .HasConstraintName("FK__empleado__rol_id__5070F446");

                    b.Navigation("Persona");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Horario", b =>
                {
                    b.HasOne("CRUDPersonas.Entities.EstadoHorario", "EstadoHorario")
                        .WithMany("Horarios")
                        .HasForeignKey("EstadoHorarioId")
                        .HasConstraintName("fk_horario_estado_horario");

                    b.HasOne("CRUDPersonas.Entities.Reserva", "Reserva")
                        .WithMany("Horarios")
                        .HasForeignKey("ReservaId")
                        .HasConstraintName("fk_horario_reserva");

                    b.Navigation("EstadoHorario");

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Producto", b =>
                {
                    b.HasOne("CRUDPersonas.Entities.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("fk_producto_categoria");

                    b.HasOne("CRUDPersonas.Entities.Proveedor", "Proveedor")
                        .WithMany("Productos")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("fk_producto_proveedor");

                    b.Navigation("Categoria");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Reserva", b =>
                {
                    b.HasOne("CRUDPersonas.Entities.EstadoReserva", "EstadoReserva")
                        .WithMany("Reservas")
                        .HasForeignKey("EstadoReservaId")
                        .HasConstraintName("fk_reserva_estado_reserva");

                    b.HasOne("CRUDPersonas.Entities.Persona", "Persona")
                        .WithMany("Reservas")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("fk_reserva_persona");

                    b.Navigation("EstadoReserva");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.ReservaVenta", b =>
                {
                    b.HasOne("CRUDPersonas.Entities.Reserva", "Reserva")
                        .WithMany()
                        .HasForeignKey("ReservaId")
                        .HasConstraintName("fk_reserva_venta_reserva");

                    b.HasOne("CRUDPersonas.Entities.Venta", "Venta")
                        .WithMany()
                        .HasForeignKey("VentaId")
                        .HasConstraintName("fk_reserva_venta_venta");

                    b.Navigation("Reserva");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.VentaProducto", b =>
                {
                    b.HasOne("CRUDPersonas.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK__venta_pro__produ__6EF57B66");

                    b.HasOne("CRUDPersonas.Entities.Venta", "Venta")
                        .WithMany()
                        .HasForeignKey("VentaId")
                        .HasConstraintName("FK__venta_pro__venta__6E01572D");

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.EstadoHorario", b =>
                {
                    b.Navigation("Horarios");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.EstadoReserva", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Horario", b =>
                {
                    b.Navigation("Canchas");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Persona", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Empleados");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Proveedor", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Reserva", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Horarios");
                });

            modelBuilder.Entity("CRUDPersonas.Entities.Rol", b =>
                {
                    b.Navigation("Empleados");
                });
#pragma warning restore 612, 618
        }
    }
}
